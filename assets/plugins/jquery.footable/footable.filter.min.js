/*!
 * FooTable - Awesome Responsive Tables
 * Version : 0.5
 * http://themergency.com/footable
 *
 * Requires jQuery - http://jquery.com/
 *
 * Copyright 2012 Steven Usher & Brad Vincent
 * Released under the MIT license
 * You are free to use FooTable in commercial projects as long as this copyright header is left intact.
 *
 * Date: 22 Apr 2013
 */
(function (t, e, undefined) {
    function a() {
        var t = this;
        t.id = null, t.busy = !1, t.start = function (e, a) {
            t.busy || (t.stop(), t.id = setTimeout(function () {
                e(), t.id = null, t.busy = !1
            }, a), t.busy = !0)
        }, t.stop = function () {
            null !== t.id && (clearTimeout(t.id), t.id = null, t.busy = !1)
        }
    }

    function i(i, o, n) {
        var r = this;
        r.id = n, r.table = i, r.options = o, r.breakpoints = [], r.breakpointNames = "", r.columns = {};
        var l = r.options, d = l.classes, s = l.events, u = l.triggers, f = 0;
        return r.timers = {
            resize: new a, register: function (t) {
                return r.timers[t] = new a, r.timers[t]
            }
        }, e.footable.plugins.init(r), r.init = function () {
            var a = t(e), i = t(r.table);
            if (i.hasClass(d.loaded))return r.raise(s.alreadyInitialized), undefined;
            r.raise(s.initializing), i.addClass(d.loading), i.find(l.columnDataSelector).each(function () {
                var t = r.getColumnData(this);
                r.columns[t.index] = t
            });
            for (var o in l.breakpoints)r.breakpoints.push({
                name: o,
                width: l.breakpoints[o]
            }), r.breakpointNames += o + " ";
            r.breakpoints.sort(function (t, e) {
                return t.width - e.width
            }), i.bind(u.initialize, function () {
                i.removeData("footable_info"), i.data("breakpoint", ""), r.addRowToggle(), r.bindToggleSelectors(), r.setColumnClasses(), i.removeClass(d.loading), i.addClass(d.loaded).addClass(d.main), i.trigger(u.resize), r.raise(s.initialized)
            }).bind(u.resize, function () {
                r.resize()
            }).bind(u.expandFirstRow, function () {
                i.find(l.toggleSelector).first().not("." + d.detailShow).trigger(u.toggleRow)
            }), i.trigger(u.initialize), a.bind("resize.footable", function () {
                r.timers.resize.stop(), r.timers.resize.start(function () {
                    r.raise(u.resize)
                }, l.delay)
            })
        }, r.addRowToggle = function () {
            var e = t(r.table), a = !1;
            e.find("span." + d.toggle).remove();
            for (var i in r.columns) {
                var o = r.columns[i];
                if (o.toggle) {
                    a = !0;
                    var n = "> tbody > tr:not(." + d.detail + ") > td:nth-child(" + (parseInt(o.index, 10) + 1) + ")";
                    return e.find(n).not("." + d.detailCell).prepend(t("<span />").addClass(d.toggle)), undefined
                }
            }
            a || e.find("> tbody > tr:not(." + d.detail + ") > td:first-child").not("." + d.detailCell).prepend(t("<span />").addClass(d.toggle))
        }, r.setColumnClasses = function () {
            $table = t(r.table);
            for (var e in r.columns) {
                var a = r.columns[e];
                if (null !== a.className) {
                    var i = "", o = !0;
                    t.each(a.matches, function (t, e) {
                        o || (i += ", "), i += "> tbody > tr:not(." + d.detail + ") > td:nth-child(" + (parseInt(e, 10) + 1) + ")", o = !1
                    }), $table.find(i).not("." + d.detailCell).addClass(a.className)
                }
            }
        }, r.bindToggleSelectors = function () {
            var e = t(r.table);
            e.find(l.toggleSelector).unbind(u.toggleRow).bind(u.toggleRow, function () {
                var e = t(this).is("tr") ? t(this) : t(this).parents("tr:first");
                r.toggleDetail(e.get(0))
            }), e.find(l.toggleSelector).unbind("click.footable").bind("click.footable", function (a) {
                e.is(".breakpoint") && t(a.target).is("td,.footable-toggle") && t(this).trigger(u.toggleRow)
            })
        }, r.parse = function (t, e) {
            var a = l.parsers[e.type] || l.parsers.alpha;
            return a(t)
        }, r.getColumnData = function (e) {
            var a = t(e), i = a.data("hide"), o = a.index();
            i = i || "", i = i.split(",");
            var n = {
                index: o,
                hide: {},
                type: a.data("type") || "alpha",
                name: a.data("name") || t.trim(a.text()),
                ignore: a.data("ignore") || !1,
                toggle: a.data("toggle") || !1,
                className: a.data("class") || null,
                matches: [],
                names: {},
                group: a.data("group") || null,
                groupName: null
            };
            if (null !== n.group) {
                var d = t(r.table).find('> thead > tr.footable-group-row > th[data-group="' + n.group + '"], > thead > tr.footable-group-row > td[data-group="' + n.group + '"]').first();
                n.groupName = r.parse(d, {type: "alpha"})
            }
            var u = parseInt(a.prev().attr("colspan") || 0, 10);
            f += u > 1 ? u - 1 : 0;
            var h = parseInt(a.attr("colspan") || 0, 10), g = n.index + f;
            if (h > 1) {
                var c = a.data("names");
                c = c || "", c = c.split(",");
                for (var p = 0; h > p; p++)n.matches.push(p + g), c.length > p && (n.names[p + g] = c[p])
            } else n.matches.push(g);
            n.hide["default"] = "all" === a.data("hide") || t.inArray("default", i) >= 0;
            for (var b in l.breakpoints)n.hide[b] = "all" === a.data("hide") || t.inArray(b, i) >= 0;
            var m = r.raise(s.columnData, {column: {data: n, th: e}});
            return m.column.data
        }, r.getViewportWidth = function () {
            return window.innerWidth || (document.body ? document.body.offsetWidth : 0)
        }, r.getViewportHeight = function () {
            return window.innerHeight || (document.body ? document.body.offsetHeight : 0)
        }, r.calculateWidthAndHeight = function (t, e) {
            return jQuery.isFunction(l.calculateWidthAndHeightOverride) ? l.calculateWidthAndHeightOverride(t, e) : (e.viewportWidth < e.width && (e.width = e.viewportWidth), e.viewportHeight < e.height && (e.height = e.viewportHeight), e)
        }, r.hasBreakpointColumn = function (t) {
            for (var e in r.columns)if (r.columns[e].hide[t]) {
                if (r.columns[e].ignore)continue;
                return !0
            }
            return !1
        }, r.resize = function () {
            var e = t(r.table);
            if (e.is(":visible")) {
                var a = {
                    width: e.width(),
                    height: e.height(),
                    viewportWidth: r.getViewportWidth(),
                    viewportHeight: r.getViewportHeight(),
                    orientation: null
                };
                a.orientation = a.viewportWidth > a.viewportHeight ? "landscape" : "portrait", a = r.calculateWidthAndHeight(e, a);
                var i = e.data("footable_info");
                if (e.data("footable_info", a), r.raise(s.resizing, {
                        old: i,
                        info: a
                    }), !i || i && i.width && i.width !== a.width || i && i.height && i.height !== a.height) {
                    for (var o, n = null, l = 0; r.breakpoints.length > l; l++)if (o = r.breakpoints[l], o && o.width && a.width <= o.width) {
                        n = o;
                        break
                    }
                    var u = null === n ? "default" : n.name, f = r.hasBreakpointColumn(u), h = e.data("breakpoint");
                    e.data("breakpoint", u), u !== h && (e.find("> tbody > tr:not(." + d.detail + ")").data("detail_created", !1).end().removeClass("default breakpoint").removeClass(r.breakpointNames).addClass(u + (f ? " breakpoint" : "")).find("> thead > tr:last-child > th").each(function () {
                        var a = r.columns[t(this).index()], i = "", o = !0;
                        t.each(a.matches, function (t, e) {
                            o || (i += ", ");
                            var a = e + 1;
                            i += "> tbody > tr:not(." + d.detail + ") > td:nth-child(" + a + ")", i += ", > tfoot > tr:not(." + d.detail + ") > td:nth-child(" + a + ")", i += ", > colgroup > col:nth-child(" + a + ")", o = !1
                        }), i += ', > thead > tr[data-group-row="true"] > th[data-group="' + a.group + '"]';
                        var n = e.find(i).add(this);
                        if (a.hide[u] === !1 ? n.show() : n.hide(), 1 === e.find("> thead > tr.footable-group-row").length) {
                            var l = e.find('> thead > tr:last-child > th[data-group="' + a.group + '"]:visible, > thead > tr:last-child > th[data-group="' + a.group + '"]:visible'), s = e.find('> thead > tr.footable-group-row > th[data-group="' + a.group + '"], > thead > tr.footable-group-row > td[data-group="' + a.group + '"]'), f = 0;
                            t.each(l, function () {
                                f += parseInt(t(this).attr("colspan") || 1, 10)
                            }), f > 0 ? s.attr("colspan", f).show() : s.hide()
                        }
                    }).end().find("> tbody > tr." + d.detailShow).each(function () {
                        r.createOrUpdateDetailRow(this)
                    }), e.find("> tbody > tr." + d.detailShow + ":visible").each(function () {
                        var e = t(this).next();
                        e.hasClass(d.detail) && ("default" !== u || f ? e.show() : e.hide())
                    }), e.find("> thead > tr > th.footable-last-column, > tbody > tr > td.footable-last-column").removeClass("footable-last-column"), e.find("> thead > tr > th.footable-first-column, > tbody > tr > td.footable-first-column").removeClass("footable-first-column"), e.find("> thead > tr, > tbody > tr").find("> th:visible:last, > td:visible:last").addClass("footable-last-column").end().find("> th:visible:first, > td:visible:first").addClass("footable-first-column"), r.raise(s.breakpoint, {
                        breakpoint: u,
                        info: a
                    }))
                }
                r.raise(s.resized, {old: i, info: a})
            }
        }, r.toggleDetail = function (e) {
            var a = t(e), i = a.next();
            a.hasClass(d.detailShow) ? (a.removeClass(d.detailShow), i.hasClass(d.detail) && i.hide(), r.raise(s.rowCollapsed, {row: e})) : (r.createOrUpdateDetailRow(e), a.addClass(d.detailShow), i.show(), r.raise(s.rowExpanded, {row: e}))
        }, r.getColumnFromTdIndex = function (e) {
            var a = null;
            for (var i in r.columns)if (t.inArray(e, r.columns[i].matches) >= 0) {
                a = r.columns[i];
                break
            }
            return a
        }, r.createOrUpdateDetailRow = function (e) {
            var a, i = t(e), o = i.next(), n = [];
            if (i.data("detail_created") === !0)return !0;
            if (i.is(":hidden"))return !1;
            if (r.raise(s.rowDetailUpdating, {row: i, detail: o}), i.find("> td:hidden").each(function () {
                    var e = t(this).index(), a = r.getColumnFromTdIndex(e), i = a.name;
                    return a.ignore === !0 ? !0 : (e in a.names && (i = a.names[e]), n.push({
                        name: i,
                        value: r.parse(this, a),
                        display: t.trim(t(this).html()),
                        group: a.group,
                        groupName: a.groupName
                    }), !0)
                }), 0 === n.length)return !1;
            var u = i.find("> td:visible").length, f = o.hasClass(d.detail);
            return f || (o = t('<tr class="' + d.detail + '"><td class="' + d.detailCell + '"><div class="' + d.detailInner + '"></div></td></tr>'), i.after(o)), o.find("> td:first").attr("colspan", u), a = o.find("." + d.detailInner).empty(), l.createDetail(a, n, l.createGroupedDetail, l.detailSeparator, d), i.data("detail_created", !0), r.raise(s.rowDetailUpdated, {
                row: i,
                detail: o
            }), !f
        }, r.raise = function (e, a) {
            r.options.debug === !0 && t.isFunction(r.options.log) && r.options.log(e, "event"), a = a || {};
            var i = {ft: r};
            t.extend(!0, i, a);
            var o = t.Event(e, i);
            return o.ft || t.extend(!0, o, i), t(r.table).trigger(o), o
        }, r.init(), r
    }

    e.footable = {
        options: {
            delay: 100,
            breakpoints: {phone: 480, tablet: 1024},
            parsers: {
                alpha: function (e) {
                    return t(e).data("value") || t.trim(t(e).text())
                }, numeric: function (e) {
                    var a = t(e).data("value") || t(e).text().replace(/[^0-9.\-]/g, "");
                    return a = parseFloat(a), isNaN(a) && (a = 0), a
                }
            },
            calculateWidthAndHeightOverride: null,
            toggleSelector: " > tbody > tr:not(.footable-row-detail)",
            columnDataSelector: "> thead > tr:last-child > th, > thead > tr:last-child > td",
            detailSeparator: ":",
            createGroupedDetail: function (t) {
                for (var e = {_none: {name: null, data: []}}, a = 0; t.length > a; a++) {
                    var i = t[a].group;
                    null !== i ? (i in e || (e[i] = {
                        name: t[a].groupName || t[a].group,
                        data: []
                    }), e[i].data.push(t[a])) : e._none.data.push(t[a])
                }
                return e
            },
            createDetail: function (t, e, a, i, o) {
                var n = a(e);
                for (var r in n)if (0 !== n[r].data.length) {
                    "_none" !== r && t.append('<div class="' + o.detailInnerGroup + '">' + n[r].name + "</div>");
                    for (var l = 0; n[r].data.length > l; l++) {
                        var d = n[r].data[l].name ? i : "";
                        t.append('<div class="' + o.detailInnerRow + '"><div class="' + o.detailInnerName + '">' + n[r].data[l].name + d + '</div><div class="' + o.detailInnerValue + '">' + n[r].data[l].display + "</div></div>")
                    }
                }
            },
            classes: {
                main: "footable",
                loading: "footable-loading",
                loaded: "footable-loaded",
                toggle: "footable-toggle",
                detail: "footable-row-detail",
                detailCell: "footable-row-detail-cell",
                detailInner: "footable-row-detail-inner",
                detailInnerRow: "footable-row-detail-row",
                detailInnerGroup: "footable-row-detail-group",
                detailInnerName: "footable-row-detail-name",
                detailInnerValue: "footable-row-detail-value",
                detailShow: "footable-detail-show"
            },
            triggers: {
                initialize: "footable_initialize",
                resize: "footable_resize",
                toggleRow: "footable_toggle_row",
                expandFirstRow: "footable_expand_first_row"
            },
            events: {
                alreadyInitialized: "footable_already_initialized",
                initializing: "footable_initializing",
                initialized: "footable_initialized",
                resizing: "footable_resizing",
                resized: "footable_resized",
                breakpoint: "footable_breakpoint",
                columnData: "footable_column_data",
                rowDetailUpdating: "footable_row_detail_updating",
                rowDetailUpdated: "footable_row_detail_updated",
                rowCollapsed: "footable_row_collapsed",
                rowExpanded: "footable_row_expanded"
            },
            debug: !1,
            log: null
        }, version: {
            major: 0, minor: 5, toString: function () {
                return e.footable.version.major + "." + e.footable.version.minor
            }, parse: function (t) {
                return version = /(\d+)\.?(\d+)?\.?(\d+)?/.exec(t), {
                    major: parseInt(version[1], 10) || 0,
                    minor: parseInt(version[2], 10) || 0,
                    patch: parseInt(version[3], 10) || 0
                }
            }
        }, plugins: {
            _validate: function (a) {
                return "string" != typeof a.name ? (e.footable.options.debug === !0 && console.error('Validation failed, plugin does not implement a string property called "name".', a), !1) : t.isFunction(a.init) ? (e.footable.options.debug === !0 && console.log('Validation succeeded for plugin "' + a.name + '".', a), !0) : (e.footable.options.debug === !0 && console.error('Validation failed, plugin "' + a.name + '" does not implement a function called "init".', a), !1)
            }, registered: [], register: function (a, i) {
                e.footable.plugins._validate(a) && (e.footable.plugins.registered.push(a), i !== undefined && "object" == typeof i && t.extend(!0, e.footable.options, i), e.footable.options.debug === !0 && console.log('Plugin "' + a.name + '" has been registered with the Foobox.', a))
            }, init: function (t) {
                for (var a = 0; e.footable.plugins.registered.length > a; a++)try {
                    e.footable.plugins.registered[a].init(t)
                } catch (i) {
                    e.footable.options.debug === !0 && console.error(i)
                }
            }
        }
    };
    var o = 0;
    t.fn.footable = function (a) {
        a = a || {};
        var n = t.extend(!0, {}, e.footable.options, a);
        return this.each(function () {
            o++, this.footable = new i(this, n, o)
        })
    }
})(jQuery, window);